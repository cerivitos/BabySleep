{
  "version": 3,
  "file": "components.css",
  "sources": [
    "..\\src\\components\\Entry.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import { tweened } from \"svelte/motion\";\r\n  import { cubicOut } from \"svelte/easing\";\r\n  import {\r\n    addMinutes,\r\n    format,\r\n    differenceInMinutes,\r\n    compareAsc,\r\n    isAfter\r\n  } from \"date-fns\";\r\n\r\n  let putDownDate = format(new Date(), \"yyyy-MM-dd\");\r\n  let putDownTime = format(new Date(), \"HH:mm\");\r\n  let sleepDate,\r\n    sleepTime,\r\n    wakeDate,\r\n    wakeTime,\r\n    pickUpDate,\r\n    pickUpTime,\r\n    currentDateTime,\r\n    elapsedSleepTime;\r\n\r\n  const elapsedSleepTimeDivHeight = tweened(0, {\r\n    duration: 450,\r\n    easing: cubicOut\r\n  });\r\n\r\n  let time = new Date();\r\n\r\n  onMount(() => {\r\n    const interval = setInterval(() => {\r\n      time = new Date();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  /**\r\n   * @param {string} dateString The string representing the date component in yyyy-MM-dd format\r\n   * @param {string} timeString The string representing the time component in HH:mm format\r\n   * @param {number} minutesToAdd Number of minutes to be added to the starting date generated from dateString and timeString\r\n   * @param {string} outputFormat The output format required, either 'date' or 'time'\r\n   * @returns {string} The new date after adding time, in the required output format. Defaults to 'date' for any other value which is not 'time'\r\n   */\r\n  function addTime(dateString, timeString, minutesToAdd, outputFormat) {\r\n    const newDate = addMinutes(\r\n      new Date(dateString + \" \" + timeString),\r\n      minutesToAdd\r\n    );\r\n    return outputFormat === \"time\"\r\n      ? format(newDate, \"HH:mm\")\r\n      : format(newDate, \"yyyy-MM-dd\");\r\n  }\r\n\r\n  /**\r\n   * Validates form input to ensure date times are always greater than the previous event\r\n   * @returns {boolean[]}\r\n   */\r\n  function checkInputs() {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    let check1, check2, check3;\r\n\r\n    if (\r\n      isAfter(\r\n        new Date(sleepDate + \" \" + sleepTime),\r\n        new Date(putDownDate + \" \" + putDownTime)\r\n      )\r\n    ) {\r\n      check1 = true;\r\n    } else {\r\n      check1 = false;\r\n    }\r\n\r\n    if (\r\n      isAfter(\r\n        new Date(wakeDate + \" \" + wakeTime),\r\n        new Date(sleepDate + \" \" + sleepTime)\r\n      )\r\n    ) {\r\n      check2 = true;\r\n    } else {\r\n      check2 = false;\r\n    }\r\n\r\n    if (\r\n      isAfter(\r\n        new Date(pickUpDate + \" \" + pickUpTime),\r\n        new Date(wakeDate + \" \" + wakeTime)\r\n      )\r\n    ) {\r\n      check3 = true;\r\n    } else {\r\n      check3 = false;\r\n    }\r\n\r\n    return [check1, check2, check3];\r\n  }\r\n\r\n  $: sleepDate = addTime(putDownDate, putDownTime, 5, \"date\");\r\n  $: sleepTime = addTime(putDownDate, putDownTime, 5, \"time\");\r\n  $: wakeDate = addTime(sleepDate, sleepTime, 90, \"date\");\r\n  $: wakeTime = addTime(sleepDate, sleepTime, 90, \"time\");\r\n  $: pickUpDate = addTime(wakeDate, wakeTime, 5, \"date\");\r\n  $: pickUpTime = addTime(wakeDate, wakeTime, 5, \"time\");\r\n  /**\r\n   * Calculates sleep time by taking the difference between falling asleep and either the current time or wake time (whichever is lower). Also animates the div height to show number of minutes asleep if it is more than zero.\r\n   */\r\n  $: if (isAfter(time, new Date(sleepDate + \" \" + sleepTime))) {\r\n    if (isAfter(new Date(wakeDate + \" \" + wakeTime), time)) {\r\n      elapsedSleepTime = differenceInMinutes(\r\n        time,\r\n        new Date(sleepDate + \" \" + sleepTime)\r\n      );\r\n    } else {\r\n      elapsedSleepTime = differenceInMinutes(\r\n        new Date(wakeDate + \" \" + wakeTime),\r\n        new Date(sleepDate + \" \" + sleepTime)\r\n      );\r\n    }\r\n    /**\r\n     * Tween div height from 0 to 6rem\r\n     */\r\n    elapsedSleepTimeDivHeight.set(6);\r\n  } else {\r\n    elapsedSleepTime = 0;\r\n    /**\r\n     * Tween div height to 0, hiding the div\r\n     */\r\n    elapsedSleepTimeDivHeight.set(0);\r\n  }\r\n</script>\r\n\r\n<style type=\"css\">.input{font-size:1.5rem;text-transform:lowercase;border-bottom-width:4px;color:#edf2f4;border-color:#2ec4b6;background-color:transparent;margin-bottom:1rem;width:auto}.background{background-color:#2b2d42;color:#8d99ae}</style>\r\n\r\n<div class=\"background p-4\">\r\n  <h1>\r\n    Put down at\r\n    <body>\r\n      <input class=\"input\" type=\"date\" bind:value={putDownDate} />\r\n      <input class=\"input\" type=\"time\" bind:value={putDownTime} />\r\n    </body>\r\n  </h1>\r\n  <div class=\"w-full mt-8 text-3xl text-center\">▼</div>\r\n</div>\r\n<div class=\"background px-4 pt-4 pb-12\">\r\n  <h1>\r\n    Fell asleep at\r\n    <body>\r\n      <input\r\n        class=\"input\"\r\n        type=\"date\"\r\n        bind:value={sleepDate}\r\n        min={putDownDate} />\r\n      <input\r\n        class=\"input\"\r\n        type=\"time\"\r\n        bind:value={sleepTime}\r\n        min={putDownTime} />\r\n    </body>\r\n  </h1>\r\n</div>\r\n<div\r\n  class=\"w-full overflow-hidden bg-accentColor3\"\r\n  style=\"height: {$elapsedSleepTimeDivHeight}rem\">\r\n  <body class=\"text-2xl justify-center items-center flex\">\r\n    Asleep for\r\n    <div\r\n      class=\"inline-block mx-2 px-2 py-1 rounded-full w-auto text-center\r\n      bg-secondaryColor font-bold\">\r\n      {elapsedSleepTime}\r\n    </div>\r\n    {elapsedSleepTime === 1 ? 'minute' : 'minutes'}\r\n  </body>\r\n</div>\r\n<div class=\"background px-4 pb-4 pt-12\">\r\n  <h1>\r\n    Woke up at\r\n    <body>\r\n      <input class=\"input\" type=\"date\" bind:value={wakeDate} />\r\n      <input class=\"input\" type=\"time\" bind:value={wakeTime} />\r\n    </body>\r\n\r\n  </h1>\r\n  <div class=\"w-full mt-8 text-3xl text-center\">▼</div>\r\n</div>\r\n<div class=\"background p-4\">\r\n  <h1>\r\n    Picked up at\r\n    <body>\r\n      <input class=\"input\" type=\"date\" bind:value={pickUpDate} />\r\n      <input class=\"input\" type=\"time\" bind:value={pickUpTime} />\r\n    </body>\r\n  </h1>\r\n  <div class=\"flex items-center justify-center\">\r\n    <button\r\n      class=\"py-2 w-1/2 my-12 rounded-lg bg-accentColor2 text-white text-2xl\r\n      font-bold hover:shadow-lg border-b-4 border-teal-700\"\r\n      on:click={checkInputs}>\r\n      Submit\r\n    </button>\r\n  </div>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAyIkB,qBAAM,CAAC,UAAU,MAAM,CAAC,eAAe,SAAS,CAAC,oBAAoB,GAAG,CAAC,MAAM,OAAO,CAAC,aAAa,OAAO,CAAC,iBAAiB,WAAW,CAAC,cAAc,IAAI,CAAC,MAAM,IAAI,CAAC,0BAAW,CAAC,iBAAiB,OAAO,CAAC,MAAM,OAAO,CAAC"
}