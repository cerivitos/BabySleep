{
  "version": 3,
  "file": "components.css",
  "sources": [
    "..\\src\\components\\Entry.svelte",
    "..\\src\\components\\Settings.svelte",
    "..\\src\\components\\Summary.svelte",
    "..\\src\\components\\Scaffold.svelte",
    "..\\src\\components\\LoadingSpinner.svelte",
    "..\\src\\components\\EntryBlock.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount, onDestroy } from \"svelte\";\r\n  import { tweened } from \"svelte/motion\";\r\n  import { cubicOut } from \"svelte/easing\";\r\n  import { fade } from \"svelte/transition\";\r\n  import {\r\n    addMinutes,\r\n    format,\r\n    differenceInMinutes,\r\n    compareAsc,\r\n    isAfter,\r\n    isDate,\r\n    isEqual\r\n  } from \"date-fns\";\r\n  import { gapiInstance, userName } from \"../store/store.js\";\r\n  import { credentials } from \"../../credentials.js\";\r\n  import EntryBlock from \"./EntryBlock.svelte\";\r\n  import { signIn } from \"../util.js\";\r\n  import LoadingSpinner from \"./LoadingSpinner.svelte\";\r\n\r\n  let putDownDate = format(new Date(), \"yyyy-MM-dd\");\r\n  let putDownTime = format(new Date(), \"HH:mm\");\r\n  let sleepDate,\r\n    sleepTime,\r\n    wakeDate,\r\n    wakeTime,\r\n    pickUpDate,\r\n    pickUpTime,\r\n    currentDateTime,\r\n    elapsedSleepTime;\r\n\r\n  /**\r\n   * Validation checks to verify if the inputted date time is after the date time of he previous field\r\n   * @type {boolean}\r\n   */\r\n  let check2v1 = true;\r\n  let check3v2 = true;\r\n  let check4v3 = true;\r\n\r\n  let isNap = true;\r\n  let nextPutDownTime;\r\n\r\n  let sending = false;\r\n\r\n  const elapsedSleepTimeDivHeight = tweened(0, {\r\n    duration: 450,\r\n    easing: cubicOut\r\n  });\r\n\r\n  const nextPutDownTimeDivHeight = tweened(0, {\r\n    duration: 450,\r\n    easing: cubicOut\r\n  });\r\n\r\n  let time = new Date();\r\n\r\n  onMount(() => {\r\n    if (localStorage.getItem(\"cache\") != undefined) {\r\n      const cache = JSON.parse(localStorage.getItem(\"cache\"));\r\n\r\n      putDownDate = cache.putDownDate;\r\n      putDownTime = cache.putDownTime;\r\n      sleepDate = cache.sleepDate;\r\n      sleepTime = cache.sleepTime;\r\n      pickUpDate = cache.pickUpDate;\r\n      pickUpTime = cache.pickUpTime;\r\n      wakeDate = cache.wakeDate;\r\n      wakeTime = cache.wakeTime;\r\n      cache.isNap !== undefined ? (isNap = cache.isNap) : (isNap = true);\r\n    }\r\n\r\n    const interval = setInterval(() => {\r\n      time = new Date();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  });\r\n\r\n  onDestroy(() => {\r\n    let cache = {\r\n      putDownDate: putDownDate,\r\n      putDownTime: putDownTime,\r\n      sleepDate: sleepDate,\r\n      sleepTime: sleepTime,\r\n      wakeDate: wakeDate,\r\n      wakeTime: wakeTime,\r\n      pickUpDate: pickUpDate,\r\n      pickUpTime: pickUpTime,\r\n      isNap: isNap\r\n    };\r\n\r\n    localStorage.setItem(\"cache\", JSON.stringify(cache));\r\n  });\r\n\r\n  /**\r\n   * @param {string} dateString The string representing the date component in yyyy-MM-dd format\r\n   * @param {string} timeString The string representing the time component in HH:mm format\r\n   * @param {number} minutesToAdd Number of minutes to be added to the starting date generated from dateString and timeString\r\n   * @param {string} outputFormat The output format required, either 'date' or 'time'\r\n   * @returns {string} The new date after adding time, in the required output format. Defaults to 'date' for any other value which is not 'time'\r\n   */\r\n  function addTime(dateString, timeString, minutesToAdd, outputFormat) {\r\n    const newDate = addMinutes(\r\n      new Date(dateString + \"T\" + timeString),\r\n      minutesToAdd\r\n    );\r\n    return outputFormat === \"time\"\r\n      ? format(newDate, \"HH:mm\")\r\n      : format(newDate, \"yyyy-MM-dd\");\r\n  }\r\n\r\n  /**\r\n   * Ensures all validation criteria are met before sending to Sheets API\r\n   */\r\n  function validateAndSend() {\r\n    let currentRow;\r\n\r\n    if (\r\n      check2v1 &&\r\n      check3v2 &&\r\n      check4v3 &&\r\n      $gapiInstance.client.sheets !== null\r\n    ) {\r\n      /**\r\n       * Set sending flag to true and show loading spinner\r\n       */\r\n      sending = true;\r\n\r\n      /**\r\n       * Saves the nap number for use later when calculating estimated next put down time.\r\n       * @type {number}\r\n       */\r\n      let napNumber;\r\n\r\n      /**\r\n       * Get the row number after adding this current data. Needed for formulas.\r\n       */\r\n      $gapiInstance.client.sheets.spreadsheets.values\r\n        .get({\r\n          spreadsheetId: credentials.SPREADSHEET_ID,\r\n          range: credentials.SHEET_NAME + \"!A1:A\"\r\n        })\r\n        .then(response => {\r\n          currentRow = response.result.values.length + 1;\r\n\r\n          /**\r\n           * Add data by appending after the last current row of data. Includes formulas to calculate other columns.\r\n           */\r\n          $gapiInstance.client.sheets.spreadsheets.values\r\n            .append({\r\n              spreadsheetId: credentials.SPREADSHEET_ID,\r\n              range: credentials.SHEET_NAME,\r\n              valueInputOption: \"USER_ENTERED\",\r\n              includeValuesInResponse: true,\r\n              resource: {\r\n                values: [\r\n                  [\r\n                    /**\r\n                     * Put Down (PD)\r\n                     * */\r\n                    putDownDate + \" \" + putDownTime,\r\n                    /**\r\n                     * Sleep Start\r\n                     * */\r\n                    sleepDate + \" \" + sleepTime,\r\n                    /**\r\n                     * Sleep End\r\n                     */\r\n                    wakeDate + \" \" + wakeTime,\r\n                    /**\r\n                     * Pick Up\r\n                     */\r\n                    pickUpDate + \" \" + pickUpTime,\r\n                    /**\r\n                     * Next Put Down\r\n                     */\r\n                    `=C${currentRow}+(D${currentRow}-C${currentRow})/2+if(M${currentRow}=1,Rules!$B$7,if(M${currentRow}=2,Rules!$B$8,Rules!$B$9))`,\r\n                    /**\r\n                     * Time to fall asleep\r\n                     */\r\n                    `=if(or(A${currentRow}=\"\",B${currentRow}=\"\"),\"\",B${currentRow}-A${currentRow})`,\r\n                    /**\r\n                     * Sleep Duration\r\n                     */\r\n                    `=if(or(C${currentRow}=\"\",B${currentRow}=\"\"),\"\",C${currentRow}-B${currentRow})`,\r\n                    /**\r\n                     * WT to PD\r\n                     */\r\n                    `=A${currentRow}-C${currentRow - 1}`,\r\n                    /**\r\n                     * Adjusted WT\r\n                     */\r\n                    `=(A${currentRow}-D${currentRow -\r\n                      1})+(F${currentRow}/2)+(D${currentRow - 1}-C${currentRow -\r\n                      1})/2`,\r\n                    /**\r\n                     * Actual WT\r\n                     */\r\n                    `=B${currentRow}-C${currentRow - 1}`,\r\n                    /**\r\n                     * Total WT (TWT)\r\n                     */\r\n                    `=if(and(day(B${currentRow})=day(B${currentRow -\r\n                      1}),month(B${currentRow})=month(B${currentRow -\r\n                      1})),I${currentRow}+K${currentRow - 1},I${currentRow})`,\r\n                    /**\r\n                     * Type\r\n                     */\r\n                    isNap ? \"Nap\" : \"Sleep\",\r\n                    /**\r\n                     * Count\r\n                     */\r\n                    `=if(and(day(B${currentRow})=DAY(B${currentRow -\r\n                      1}),month(B${currentRow})=month(B${currentRow -\r\n                      1}),L${currentRow}=L${currentRow - 1}),M${currentRow -\r\n                      1}+1,1)`,\r\n                    /**\r\n                     * Total Sleep\r\n                     */\r\n                    `=if(and(day(B${currentRow})=day(B${currentRow -\r\n                      1}),month(B${currentRow})=month(B${currentRow -\r\n                      1})),G${currentRow}+N${currentRow - 1},G${currentRow})`,\r\n                    /**\r\n                     * Date\r\n                     */\r\n                    `=if(hour(A${currentRow}) < Rules!$B$5, date(year(A${currentRow}), month(A${currentRow}), day(A${currentRow})) - 1, date(year(A${currentRow}), month(A${currentRow}), day(A${currentRow})))`,\r\n                    /**\r\n                     * Duration\r\n                     */\r\n                    `=G${currentRow}`\r\n                  ]\r\n                ]\r\n              }\r\n            })\r\n            .then(response => {\r\n              if (response.status == 200) {\r\n                /**\r\n                 * Save the nap number to calculate estimated next put down time. The nap number is taken from the sheet as it is calculated by the formula appended above.\r\n                 */\r\n                napNumber = parseInt(\r\n                  response.result.updates.updatedData.values[0][12]\r\n                );\r\n\r\n                nextPutDownTime = format(\r\n                  Date.parse(response.result.updates.updatedData.values[0][4]),\r\n                  \"h:mm a\"\r\n                );\r\n\r\n                /**\r\n                 * Update cell format to date time for the first five columns.\r\n                 */\r\n                $gapiInstance.client.sheets.spreadsheets\r\n                  .batchUpdate({\r\n                    spreadsheetId: credentials.SPREADSHEET_ID,\r\n                    requests: [\r\n                      {\r\n                        repeatCell: {\r\n                          range: {\r\n                            sheetId: credentials.SHEET_ID,\r\n                            startRowIndex: 1,\r\n                            startColumnIndex: 0,\r\n                            endColumnIndex: 5\r\n                          },\r\n                          cell: {\r\n                            userEnteredFormat: {\r\n                              numberFormat: {\r\n                                type: \"DATE\",\r\n                                pattern: \"d mmm, h:mm am/pm\"\r\n                              }\r\n                            }\r\n                          },\r\n                          fields: \"userEnteredFormat.numberFormat\"\r\n                        }\r\n                      }\r\n                    ]\r\n                  })\r\n                  .then(response => {\r\n                    /**\r\n                     * Hide loading spinner\r\n                     */\r\n                    sending = false;\r\n\r\n                    putDownTime = format(new Date(), \"HH:mm\");\r\n                    sleepTime = undefined;\r\n                    wakeTime = undefined;\r\n                    pickUpTime = undefined;\r\n                    check2v1 = false;\r\n                    check3v2 = false;\r\n                    check4v3 = false;\r\n                    isNap = true;\r\n\r\n                    localStorage.setItem(\"cache\", \"\");\r\n\r\n                    document\r\n                      .getElementById(\"topBlock\")\r\n                      .scrollIntoView({ behavior: \"smooth\" });\r\n                  });\r\n              }\r\n            });\r\n        });\r\n    } else {\r\n      console.log(\r\n        `Failed to send:\\nCheck 2 v 1: ${check2v1}\\nCheck 3 v 2: ${check3v2}\\nCheck 4 v 3: ${check4v3}\\ngapi: ${gapiInstance}`\r\n      );\r\n      /**\r\n       * Hide loading spinner\r\n       */\r\n      sending = false;\r\n    }\r\n  }\r\n\r\n  function receivePutDown(event) {\r\n    putDownDate = event.detail.date;\r\n    putDownTime = event.detail.time;\r\n  }\r\n\r\n  function receiveFellAsleep(event) {\r\n    sleepDate = event.detail.date;\r\n    sleepTime = event.detail.time;\r\n  }\r\n\r\n  function receiveWokeUp(event) {\r\n    wakeDate = event.detail.date;\r\n    wakeTime = event.detail.time;\r\n  }\r\n\r\n  function receivePickedUp(event) {\r\n    pickUpDate = event.detail.date;\r\n    pickUpTime = event.detail.time;\r\n  }\r\n\r\n  /**\r\n   * Validation checks for form entry. Subsequent date times must be equal or later than previous date times.\r\n   */\r\n  $: if (\r\n    isAfter(\r\n      new Date(sleepDate + \"T\" + sleepTime),\r\n      new Date(putDownDate + \"T\" + putDownTime)\r\n    ) ||\r\n    isEqual(\r\n      new Date(sleepDate + \"T\" + sleepTime),\r\n      new Date(putDownDate + \"T\" + putDownTime)\r\n    )\r\n  ) {\r\n    check2v1 = true;\r\n  } else {\r\n    check2v1 = false;\r\n  }\r\n\r\n  $: if (\r\n    isAfter(\r\n      new Date(wakeDate + \"T\" + wakeTime),\r\n      new Date(sleepDate + \"T\" + sleepTime)\r\n    ) ||\r\n    isEqual(\r\n      new Date(wakeDate + \"T\" + wakeTime),\r\n      new Date(sleepDate + \"T\" + sleepTime)\r\n    )\r\n  ) {\r\n    check3v2 = true;\r\n  } else {\r\n    check3v2 = false;\r\n  }\r\n\r\n  $: if (\r\n    isAfter(\r\n      new Date(pickUpDate + \"T\" + pickUpTime),\r\n      new Date(wakeDate + \"T\" + wakeTime)\r\n    ) ||\r\n    isEqual(\r\n      new Date(pickUpDate + \"T\" + pickUpTime),\r\n      new Date(wakeDate + \"T\" + wakeTime)\r\n    )\r\n  ) {\r\n    check4v3 = true;\r\n  } else {\r\n    check4v3 = false;\r\n  }\r\n\r\n  $: sleepDate = putDownDate;\r\n\r\n  $: wakeDate = putDownDate;\r\n\r\n  $: pickUpDate = putDownDate;\r\n\r\n  /**\r\n   * Calculates sleep time by taking the difference between falling asleep and either the current time or wake time (whichever is lower). Also animates the div height to show number of minutes asleep if it is more than zero.\r\n   */\r\n  $: if (\r\n    check2v1 &&\r\n    !check3v2 &&\r\n    isAfter(time, new Date(sleepDate + \"T\" + sleepTime))\r\n  ) {\r\n    elapsedSleepTime = differenceInMinutes(\r\n      time,\r\n      new Date(sleepDate + \"T\" + sleepTime)\r\n    );\r\n    /**\r\n     * Tween div height from 0 to 6rem\r\n     */\r\n    elapsedSleepTimeDivHeight.set(6);\r\n  } else if (\r\n    check2v1 &&\r\n    check3v2 &&\r\n    isAfter(\r\n      new Date(wakeDate + \"T\" + wakeTime),\r\n      new Date(sleepDate + \"T\" + sleepTime)\r\n    )\r\n  ) {\r\n    elapsedSleepTime = differenceInMinutes(\r\n      new Date(wakeDate + \"T\" + wakeTime),\r\n      new Date(sleepDate + \"T\" + sleepTime)\r\n    );\r\n  } else {\r\n    elapsedSleepTime = 0;\r\n    /**\r\n     * Tween div height to 0, hiding the div\r\n     */\r\n    elapsedSleepTimeDivHeight.set(0);\r\n  }\r\n\r\n  $: if (nextPutDownTime !== undefined) {\r\n    nextPutDownTimeDivHeight.set(6);\r\n  } else {\r\n    nextPutDownTimeDivHeight.set(0);\r\n  }\r\n</script>\r\n\r\n<style type=\"text/postcss\">.nap-button{background-color:#ff9f1c;color:#fff;font-size:1.125rem;font-weight:500;padding:.5rem 1rem;outline:0}</style>\r\n\r\n{#if sending}\r\n  <div\r\n    transition:fade\r\n    class=\"w-full h-screen bg-black opacity-75 flex items-center justify-center\r\n    absolute\"\r\n    on:click>\r\n    <LoadingSpinner text=\"Sending\" />\r\n  </div>\r\n{/if}\r\n<div\r\n  id=\"topBlock\"\r\n  class=\"w-full overflow-hidden bg-accentColor text-white\"\r\n  style=\"height: {$nextPutDownTimeDivHeight}rem\">\r\n  <body class=\"text-2xl justify-center items-center flex\">\r\n    Next put down ~\r\n    <div\r\n      class=\"inline-block mx-2 px-3 py-1 rounded-full w-auto text-center\r\n      bg-secondaryColor font-bold text-backgroundColor\">\r\n      {nextPutDownTime}\r\n    </div>\r\n  </body>\r\n</div>\r\n<EntryBlock\r\n  title=\"Put down at\"\r\n  date={putDownDate}\r\n  time={putDownTime}\r\n  on:putdownat={receivePutDown} />\r\n<EntryBlock\r\n  title=\"Fell asleep at\"\r\n  date={sleepDate}\r\n  time={sleepTime}\r\n  check={check2v1}\r\n  minDate={putDownDate}\r\n  on:fellasleepat={receiveFellAsleep} />\r\n<div\r\n  class=\"w-full overflow-hidden bg-accentColor3\"\r\n  style=\"height: {$elapsedSleepTimeDivHeight}rem\">\r\n  <body class=\"text-2xl justify-center items-center flex\">\r\n    Asleep for\r\n    <div\r\n      class=\"inline-block mx-2 px-3 py-1 rounded-full w-auto text-center\r\n      bg-secondaryColor font-bold\">\r\n      {elapsedSleepTime}\r\n    </div>\r\n    {elapsedSleepTime === 1 ? 'minute' : 'minutes'}\r\n  </body>\r\n</div>\r\n<EntryBlock\r\n  title=\"Woke up at\"\r\n  date={wakeDate}\r\n  time={wakeTime}\r\n  check={check3v2}\r\n  minDate={sleepDate}\r\n  on:wokeupat={receiveWokeUp} />\r\n<EntryBlock\r\n  title=\"Picked up at\"\r\n  date={pickUpDate}\r\n  time={pickUpTime}\r\n  check={check4v3}\r\n  minDate={wakeDate}\r\n  on:pickedupat={receivePickedUp}>\r\n  <div class=\"w-full flex justify-center mt-8\">\r\n    <div class=\"inline-flex\">\r\n      <button\r\n        class=\"{isNap ? '' : 'opacity-25'} nap-button rounded-l\"\r\n        on:click={() => (isNap = true)}>\r\n        &nbsp;Nap&nbsp;\r\n      </button>\r\n      <button\r\n        class=\"{!isNap ? '' : 'opacity-25'} nap-button rounded-r\"\r\n        on:click={() => (isNap = false)}>\r\n        Sleep\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"flex items-center justify-center w-full\">\r\n    <button\r\n      class=\"py-2 w-1/2 mt-12 mb-24 rounded-lg bg-accentColor2 text-white\r\n      font-medium text-2xl hover:shadow-lg border-b-4 border-teal-700 {check2v1 && check3v2 && check4v3 ? '' : 'opacity-50'}\"\r\n      on:click={() => ($userName !== undefined ? validateAndSend() : signIn())}>\r\n      Submit\r\n    </button>\r\n  </div>\r\n</EntryBlock>\r\n",
    "<script>\r\n  import {\r\n    userName,\r\n    userPic,\r\n    gapiInstance,\r\n    sheetName\r\n  } from \"../store/store.js\";\r\n  import { onMount } from \"svelte\";\r\n  import { signOut, signIn } from \"../util.js\";\r\n  import { fade } from \"svelte/transition\";\r\n  import { credentials } from \"../../credentials.js\";\r\n  import LoadingSpinner from \"./LoadingSpinner.svelte\";\r\n\r\n  let loadingSheetName = false;\r\n\r\n  onMount(() => {\r\n    if ($sheetName === credentials.SPREADSHEET_ID) {\r\n      getSheetName(credentials.SPREADSHEET_ID);\r\n    }\r\n  });\r\n\r\n  function getSheetName(id) {\r\n    loadingSheetName = true;\r\n\r\n    if ($gapiInstance !== undefined) {\r\n      $gapiInstance.client.sheets.spreadsheets\r\n        .get({\r\n          spreadsheetId: id\r\n        })\r\n        .then(response => {\r\n          sheetName.set(response.result.properties.title);\r\n          loadingSheetName = false;\r\n        });\r\n    } else {\r\n      loadingSheetName = false;\r\n    }\r\n  }\r\n\r\n  function openSheet(id) {\r\n    window.open(`https://docs.google.com/spreadsheets/d/${id}`, \"_blank\");\r\n  }\r\n</script>\r\n\r\n<style type=\"text/postcss\">body{color:#edf2f4}.button,h2{color:#8d99ae}.button{flex:none;padding:.5rem;border-radius:.25rem;fill:currentColor;font-weight:500}.input{width:2rem;text-transform:lowercase;border-bottom-width:4px;background-color:transparent;text-align:center;min-width:10%}.input,label{color:#edf2f4}label{font-family:Roboto,sans-serif;font-size:1em;line-height:1.5}</style>\r\n\r\n<div class=\"w-full bg-backgroundColor p-4\">\r\n  {#if $userName !== undefined && $userPic !== undefined}\r\n    <div class=\"mt-2 flex-col\" in:fade={{ duration: 400 }}>\r\n      <h2>Signed in as</h2>\r\n      <div class=\"flex items-center\">\r\n        <img\r\n          src={$userPic}\r\n          alt=\"User profile picture\"\r\n          class=\"rounded-full w-8 h-8 mr-2 flex-none\" />\r\n        <body class=\"flex-1\">{$userName}</body>\r\n        <button class=\"button\" on:click={() => signOut()}>SIGN OUT</button>\r\n      </div>\r\n    </div>\r\n  {:else}\r\n    <div class=\"mt-2 flex-col\" in:fade={{ duration: 400 }}>\r\n      <h2>Sign in required</h2>\r\n      <div class=\"flex justify-center\">\r\n        <button\r\n          class=\"flex bg-white rounded shadow text-gray-700 py-2 px-4\r\n          font-medium\"\r\n          on:click={() => signIn()}>\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n            viewBox=\"0 0 48 48\"\r\n            class=\"w-6 h-6 pr-2\">\r\n            <defs>\r\n              <path\r\n                id=\"a\"\r\n                d=\"M44.5 20H24v8.5h11.8C34.7 33.9 30.1 37 24 37c-7.2\r\n                0-13-5.8-13-13s5.8-13 13-13c3.1 0 5.9 1.1 8.1 2.9l6.4-6.4C34.6\r\n                4.1 29.6 2 24 2 11.8 2 2 11.8 2 24s9.8 22 22 22c11 0 21-8 21-22\r\n                0-1.3-.2-2.7-.5-4z\" />\r\n            </defs>\r\n            <clipPath id=\"b\">\r\n              <use xlink:href=\"#a\" overflow=\"visible\" />\r\n            </clipPath>\r\n            <path clip-path=\"url(#b)\" fill=\"#FBBC05\" d=\"M0 37V11l17 13z\" />\r\n            <path\r\n              clip-path=\"url(#b)\"\r\n              fill=\"#EA4335\"\r\n              d=\"M0 11l17 13 7-6.1L48 14V0H0z\" />\r\n            <path\r\n              clip-path=\"url(#b)\"\r\n              fill=\"#34A853\"\r\n              d=\"M0 37l30-23 7.9 1L48 0v48H0z\" />\r\n            <path\r\n              clip-path=\"url(#b)\"\r\n              fill=\"#4285F4\"\r\n              d=\"M48 48L17 24l-4-3 35-10z\" />\r\n          </svg>\r\n          <span>Sign in with Google</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  {/if}\r\n  <div class=\"mt-8 flex-col\">\r\n    <h2>Connected to</h2>\r\n    <div class=\"flex items-center\">\r\n      {#if loadingSheetName}\r\n        <LoadingSpinner />\r\n      {:else}\r\n        <body class=\"flex-1 truncate\">{$sheetName}</body>\r\n        <button\r\n          class=\"button\"\r\n          on:click={() => openSheet(credentials.SPREADSHEET_ID)}>\r\n          OPEN\r\n        </button>\r\n      {/if}\r\n    </div>\r\n    <div class=\"mt-4 w-full text-center text-sm\">\r\n      <a href=\"/privacy-policy.html\">Privacy Policy</a>\r\n    </div>\r\n    <div class=\"mt-4 w-full text-center text-primaryColor text-sm\">v1.2</div>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { onMount } from \"svelte\";\r\n  import { fade } from \"svelte/transition\";\r\n  import { gapiInstance, userName } from \"../store/store.js\";\r\n  import LoadingSpinner from \"./LoadingSpinner.svelte\";\r\n  import { credentials } from \"../../credentials.js\";\r\n  import { isSameDay, format } from \"date-fns\";\r\n  import { convertToMins, convertToDuration } from \"../util.js\";\r\n  import Chart from \"chart.js\";\r\n\r\n  const historicalRows = 100;\r\n  let loading = true;\r\n  let requiresSignIn = false;\r\n  let getTodayData;\r\n\r\n  let todayDatas = [];\r\n  let historicalDatas = [];\r\n\r\n  let innerWidth;\r\n\r\n  function getData() {\r\n    $gapiInstance.client.sheets.spreadsheets.values\r\n      .get({\r\n        spreadsheetId: credentials.SPREADSHEET_ID,\r\n        range: credentials.SHEET_NAME + \"!A1:A\"\r\n      })\r\n      .then(response => {\r\n        const lastRow = response.result.values.length;\r\n        const firstRow = lastRow - historicalRows + 1;\r\n\r\n        getTodayData = $gapiInstance.client.sheets.spreadsheets.values\r\n          .batchGet({\r\n            spreadsheetId: credentials.SPREADSHEET_ID,\r\n            ranges: [\r\n              credentials.SHEET_NAME + `!A${firstRow}:Q${lastRow}`,\r\n              \"NapSleepTrend!A2:D\"\r\n            ]\r\n          })\r\n          .then(response => {\r\n            loading = false;\r\n\r\n            const sheetData = response.result.valueRanges[0].values;\r\n            const napSleepData = response.result.valueRanges[1].values;\r\n\r\n            historicalDatas = sheetData.reverse();\r\n\r\n            /**\r\n             * Need to add year to the data from Sheets as it is received as a string\r\n             */\r\n            const year = format(new Date(), \"yyyy\");\r\n\r\n            // for (let i = sheetData.length - 1; i > 15; i--) {\r\n            //   const date = new Date(sheetData[i][0].replace(\",\", ` ${year}`));\r\n            //   todayDatas.push(sheetData[i]);\r\n            // }\r\n\r\n            for (let i = 0; i < sheetData.length; i++) {\r\n              const date = new Date(sheetData[i][0].replace(\",\", ` ${year}`));\r\n\r\n              if (isSameDay(date, new Date())) {\r\n                if (\r\n                  sheetData[i][0] !== undefined &&\r\n                  sheetData[i][1] !== undefined &&\r\n                  sheetData[i][2] !== undefined &&\r\n                  sheetData[i][3] !== undefined\r\n                ) {\r\n                  todayDatas.push(sheetData[i]);\r\n                }\r\n              } else {\r\n                break;\r\n              }\r\n            }\r\n\r\n            todayDatas.reverse();\r\n\r\n            plotTWTVsFirstSleep(historicalDatas);\r\n            plotNapSleepTime(napSleepData);\r\n          });\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {string[]} data Array of sheet data\r\n   * @returns {string} The time component of the put down time, formatted as a string\r\n   */\r\n  function getPutDownTime(data) {\r\n    let nextPutDown;\r\n\r\n    if (data.length > 0) {\r\n      nextPutDown = data[data.length - 1][4].split(\", \")[1];\r\n    }\r\n\r\n    return nextPutDown;\r\n  }\r\n\r\n  function plotTWTVsFirstSleep(data) {\r\n    const ctx = document.getElementById(\"TWTVsFirstSleep\");\r\n    let scatterChartData = [];\r\n\r\n    /**\r\n     * Only include data pairs where the Sleep number was 1, but ignore when the Sleep Duration was recorded as 0:00:00 or when the TWT was manually set to 0\r\n     */\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (\r\n        data[i][11] === \"Sleep\" &&\r\n        data[i][12] === \"1\" &&\r\n        data[i][6] !== \"0:00:00\" &&\r\n        data[i][10] !== \"0\"\r\n      ) {\r\n        const pair = {\r\n          x: convertToMins(data[i][6]),\r\n          y: convertToMins(data[i][10])\r\n        };\r\n\r\n        scatterChartData.push(pair);\r\n      }\r\n    }\r\n\r\n    Chart.defaults.scale.gridLines.display = false;\r\n    Chart.defaults.global.title.display = true;\r\n    Chart.defaults.global.title.fontColor = \"#8D99AE\";\r\n    Chart.defaults.global.title.fontSize = 16;\r\n    Chart.defaults.global.title.padding = 16;\r\n    Chart.defaults.global.legend.display = false;\r\n\r\n    Chart.scaleService.updateScaleDefaults(\"linear\", {\r\n      scaleLabel: {\r\n        display: true,\r\n        fontColor: \"#EDF2F4\"\r\n      },\r\n      ticks: {\r\n        fontColor: \"#EDF2F4\"\r\n      },\r\n      gridLines: {\r\n        color: \"#8D99AE\"\r\n      }\r\n    });\r\n\r\n    let chart = new Chart(ctx, {\r\n      type: \"scatter\",\r\n      data: {\r\n        datasets: [\r\n          {\r\n            label: \"TWT vs. First Sleep Duration\",\r\n            data: scatterChartData,\r\n            pointBackgroundColor: \"#2EC4B6\"\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        aspectRatio: 1,\r\n        tooltips: {\r\n          callbacks: {\r\n            label: (tooltipItem, data) => {\r\n              return (\r\n                \"First Sleep Duration: \" +\r\n                convertToDuration(tooltipItem.label) +\r\n                \" TWT: \" +\r\n                convertToDuration(tooltipItem.value)\r\n              );\r\n            }\r\n          }\r\n        },\r\n        title: {\r\n          text: \"TWT vs. First Sleep Duration\"\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              scaleLabel: {\r\n                labelString: \"First Sleep Duration\"\r\n              },\r\n              ticks: {\r\n                callback: function(label, index, labels) {\r\n                  return convertToDuration(label);\r\n                }\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              scaleLabel: {\r\n                labelString: \"TWT\"\r\n              },\r\n              ticks: {\r\n                callback: function(label, index, labels) {\r\n                  return convertToDuration(label);\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  function plotNapSleepTime(data) {\r\n    const ctx = document.getElementById(\"napSleepTime\");\r\n\r\n    let naps = [];\r\n    let sleeps = [];\r\n    let labels = [];\r\n\r\n    data.forEach((duration, i) => {\r\n      if (i < historicalRows) {\r\n        naps.push(convertToMins(duration[1]));\r\n        sleeps.push(convertToMins(duration[2]));\r\n        labels.push(duration[0]);\r\n      }\r\n    });\r\n\r\n    let chart = new Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: labels,\r\n        datasets: [\r\n          {\r\n            label: \"Nap\",\r\n            data: naps,\r\n            backgroundColor: \"#FF9F1C\",\r\n            borderWidth: 0\r\n          },\r\n          {\r\n            label: \"Sleep\",\r\n            data: sleeps,\r\n            backgroundColor: \"#2EC4B6\",\r\n            borderWidth: 0\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        aspectRatio: 1,\r\n        tooltips: {\r\n          bodySpacing: 4,\r\n          callbacks: {\r\n            label: (tooltipItem, data) => {\r\n              if (tooltipItem.datasetIndex === 0) {\r\n                return \"Nap: \" + convertToDuration(tooltipItem.value);\r\n              } else {\r\n                return \"Sleep: \" + convertToDuration(tooltipItem.value);\r\n              }\r\n            },\r\n            footer: (tooltipItem, data) => {\r\n              let nap = data.datasets[0].data[tooltipItem[0].index];\r\n              let sleep = data.datasets[1].data[tooltipItem[0].index];\r\n\r\n              if (Number.isNaN(nap)) {\r\n                nap = 0;\r\n              }\r\n\r\n              if (Number.isNaN(sleep)) {\r\n                sleep = 0;\r\n              }\r\n\r\n              return \"Total: \" + convertToDuration(nap + sleep);\r\n            }\r\n          }\r\n        },\r\n        title: {\r\n          text: \"Nap and Sleep\"\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              categoryPercentage: 1.0,\r\n              barPercentage: 1.0,\r\n              stacked: true,\r\n              ticks: {\r\n                fontColor: \"#EDF2F4\",\r\n                callback: function(label, index, labels) {\r\n                  return label.split(\"-\")[2] + \"/\" + label.split(\"-\")[1];\r\n                }\r\n              },\r\n              gridLines: {\r\n                color: \"#8D99AE\"\r\n              },\r\n              scaleLabel: {\r\n                labelString: \"Date\",\r\n                display: true,\r\n                fontColor: \"#EDF2F4\"\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              stacked: true,\r\n              scaleLabel: {\r\n                labelString: \"Duration\"\r\n              },\r\n              ticks: {\r\n                callback: function(label, index, labels) {\r\n                  return convertToDuration(label);\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  $: if ($userName !== undefined && $gapiInstance !== undefined) {\r\n    requiresSignIn = false;\r\n    getData();\r\n  } else if ($gapiInstance !== undefined) {\r\n    requiresSignIn = true;\r\n  }\r\n</script>\r\n\r\n<style type=\"text/postcss\">body{color:#edf2f4}h2{color:#8d99ae}td{padding:.25rem .5rem;text-align:center;vertical-align:center}th{color:#8d99ae;font-weight:700;padding:.5rem}.graphContainer,.tableContainer{min-width:375px}</style>\r\n\r\n<svelte:window bind:innerWidth />\r\n<div class=\"w-full bg-backgroundColor p-4\">\r\n  <div>\r\n    <h2>Next Put Down</h2>\r\n    {#if loading && !requiresSignIn}\r\n      <LoadingSpinner />\r\n    {:else if loading && requiresSignIn}\r\n      <p transition:fade class=\"text-center text-secondaryColor\">\r\n        Sign in to view data\r\n      </p>\r\n    {:else}\r\n      <p\r\n        class=\"w-full text-center {getPutDownTime(todayDatas) !== undefined ? 'text-accentColor3 font-bold text-2xl' : 'text-secondaryColor'}\r\n        \">\r\n        {getPutDownTime(todayDatas) !== undefined ? getPutDownTime(todayDatas) : 'No data yet'}\r\n      </p>\r\n    {/if}\r\n  </div>\r\n  <div class=\"mt-8\">\r\n    <h2>Today</h2>\r\n    {#if loading && !requiresSignIn}\r\n      <LoadingSpinner />\r\n    {:else if loading && requiresSignIn}\r\n      <p transition:fade class=\"text-center text-secondaryColor\">\r\n        Sign in to view data\r\n      </p>\r\n    {:else}\r\n      <div transition:fade class=\"overflow-auto w-full\">\r\n        <div\r\n          class={innerWidth >= 375 || todayDatas.length === 0 ? 'w-full' : 'tableContainer'}>\r\n          <table class=\"w-full\">\r\n            {#if todayDatas.length > 0}\r\n              <thead>\r\n                <tr class=\"text-sm\">\r\n                  <th>\r\n                    <p>Put down</p>\r\n                  </th>\r\n                  <th>\r\n                    <p>Fell asleep</p>\r\n                  </th>\r\n                  <th>\r\n                    <p>Woke up</p>\r\n                  </th>\r\n                  <th>\r\n                    <p>Picked up</p>\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n            {:else}\r\n              <div class=\"text-center text-secondaryColor w-full\">\r\n                <p>No data yet</p>\r\n              </div>\r\n            {/if}\r\n            {#each todayDatas as todayData}\r\n              <h3 class=\"text-sm text-accentColor3\">\r\n                {todayData[11]} {todayData[11] === 'Sleep' ? '' : todayData[12]}\r\n              </h3>\r\n              <tbody>\r\n                <tr class=\"text-secondaryColor\">\r\n                  <td>{todayData[0].split(', ')[1].toLowerCase()}</td>\r\n                  <td>{todayData[1].split(', ')[1].toLowerCase()}</td>\r\n                  <td>{todayData[2].split(', ')[1].toLowerCase()}</td>\r\n                  <td>{todayData[3].split(', ')[1].toLowerCase()}</td>\r\n                </tr>\r\n              </tbody>\r\n            {/each}\r\n          </table>\r\n        </div>\r\n      </div>\r\n    {/if}\r\n  </div>\r\n  <div class=\"mt-8\">\r\n    <h2>Trends</h2>\r\n    {#if loading && !requiresSignIn}\r\n      <LoadingSpinner />\r\n    {:else if loading && requiresSignIn}\r\n      <p transition:fade class=\"text-center text-secondaryColor\">\r\n        Sign in to view data\r\n      </p>\r\n    {:else}\r\n      <div />\r\n    {/if}\r\n    <div class=\"overflow-auto w-full mb-12\">\r\n      <div class={innerWidth >= 375 ? 'w-full' : 'graphContainer'}>\r\n        <canvas id=\"napSleepTime\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"overflow-auto w-full mb-12\">\r\n      <div class={innerWidth >= 375 ? 'w-full' : 'graphContainer'}>\r\n        <canvas id=\"TWTVsFirstSleep\" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  import { showEntry, showSummary, showSettings } from \"../store/store.js\";\r\n  let innerHeight, contentHeight;\r\n\r\n  function handleClick(target) {\r\n    if (target === \"entry\") {\r\n      showEntry.set(true);\r\n      showSummary.set(false);\r\n      showSettings.set(false);\r\n    } else if (target === \"summary\") {\r\n      showEntry.set(false);\r\n      showSummary.set(true);\r\n      showSettings.set(false);\r\n    } else if (target === \"settings\") {\r\n      showEntry.set(false);\r\n      showSummary.set(false);\r\n      showSettings.set(true);\r\n    }\r\n  }\r\n\r\n  $: contentHeight =\r\n    innerHeight -\r\n    2 * parseFloat(getComputedStyle(document.documentElement).fontSize);\r\n</script>\r\n\r\n<style type=\"text/postcss\">.button{width:33.33333%;padding:.5rem;flex-direction:column;align-items:center;justify-content:center;fill:currentColor;color:#8d99ae;font-size:.875rem;outline:0}.bottom-bar{position:fixed;bottom:0;width:100%;background-color:#2b2d42;box-shadow:0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -1px rgba(0,0,0,.06);display:flex;justify-content:space-around;align-items:center;box-shadow:0 -1px 2px 0 rgba(76,76,77,.2);-webkit-filter:brightness(120%);filter:brightness(120%)}.icon{height:1.5rem;width:1.5rem;padding-bottom:.25rem;margin:auto}.selected{color:#ff9f1c}</style>\r\n\r\n<svelte:window bind:innerHeight />\r\n\r\n<div class=\"w-full h-screen bg-backgroundColor overflow-scroll \">\r\n  <div class=\"mb-8\">\r\n    <slot />\r\n  </div>\r\n  <div class=\"bottom-bar\">\r\n    <button\r\n      class=\"button {$showEntry ? 'selected' : ''}\"\r\n      on:click={() => handleClick('entry')}>\r\n      <svg\r\n        class=\"icon\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 226.834 226.834\">\r\n        <path\r\n          d=\"M80.197,44.939v-9.746c0-1.761,1.433-3.193,3.193-3.193h60.053c1.761,0,3.193,1.433,3.193,3.193v9.746\r\n          c0,1.761-1.433,3.193-3.193,3.193H83.391C81.63,48.133,80.197,46.7,80.197,44.939z\r\n          M131.841,17c-0.768-9.5-8.729-17-18.424-17\r\n          S95.761,7.5,94.993,17H131.841z\r\n          M192.309,55.334v151.333c0,11.12-9.047,20.167-20.167,20.167H54.692\r\n          c-11.12,0-20.167-9.047-20.167-20.167V55.334c0-11.12,9.047-20.167,20.167-20.167h10.506c0,0.009-0.001,0.018-0.001,0.026v9.746\r\n          c0,10.032,8.162,18.193,18.193,18.193h60.053c10.032,0,18.193-8.161,18.193-18.193v-9.746c0-0.009-0.001-0.018-0.001-0.026h10.506\r\n          C183.262,35.167,192.309,44.214,192.309,55.334z\r\n          M88.183,143.449c-3.526-2.173-8.147-1.077-10.32,2.449l-7.092,11.504l-3.661-2.884\r\n          c-3.252-2.563-7.97-2.002-10.532,1.252c-2.563,3.255-2.002,7.97,1.252,10.533l10.271,8.089c1.332,1.049,2.969,1.607,4.64,1.607\r\n          c0.436,0,0.875-0.038,1.311-0.115c2.105-0.374,3.952-1.629,5.074-3.449l11.506-18.666C92.806,150.243,91.709,145.623,88.183,143.449\r\n          z\r\n          M88.183,89.449c-3.526-2.174-8.147-1.076-10.32,2.449l-7.092,11.504l-3.661-2.884c-3.252-2.562-7.97-2.002-10.532,1.252\r\n          c-2.563,3.255-2.002,7.97,1.252,10.533l10.271,8.089c1.332,1.049,2.969,1.607,4.64,1.607c0.436,0,0.875-0.038,1.311-0.115\r\n          c2.105-0.374,3.952-1.629,5.074-3.449L90.632,99.77C92.806,96.243,91.709,91.623,88.183,89.449z\r\n          M165.858,168.5\r\n          c0-4.143-3.357-7.5-7.5-7.5h-49c-4.142,0-7.5,3.357-7.5,7.5s3.358,7.5,7.5,7.5h49C162.501,176,165.858,172.643,165.858,168.5z\r\n          M165.858,114.5c0-4.143-3.357-7.5-7.5-7.5h-49c-4.142,0-7.5,3.357-7.5,7.5s3.358,7.5,7.5,7.5h49\r\n          C162.501,122,165.858,118.643,165.858,114.5z\" />\r\n      </svg>\r\n      <span>Entry</span>\r\n    </button>\r\n    <button\r\n      class=\"button {$showSummary ? 'selected' : ''}\"\r\n      on:click={() => handleClick('summary')}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        class=\"icon\"\r\n        viewBox=\"0 0 548.176 548.176\">\r\n        <path\r\n          d=\"M534.75,68.238c-8.945-8.945-19.694-13.417-32.261-13.417H45.681c-12.562,0-23.313,4.471-32.264,13.417\r\n          C4.471,77.185,0,87.936,0,100.499v347.173c0,12.566,4.471,23.318,13.417,32.264c8.951,8.946,19.702,13.419,32.264,13.419h456.815\r\n          c12.56,0,23.312-4.473,32.258-13.419c8.945-8.945,13.422-19.697,13.422-32.264V100.499\r\n          C548.176,87.936,543.699,77.185,534.75,68.238z\r\n          M511.627,447.672c0,2.478-0.903,4.62-2.711,6.427\r\n          c-1.81,1.807-3.952,2.71-6.427,2.71H45.681c-2.473,0-4.615-0.903-6.423-2.71c-1.807-1.813-2.712-3.949-2.712-6.427V100.499\r\n          c0-2.474,0.902-4.611,2.712-6.423c1.809-1.804,3.951-2.708,6.423-2.708h456.815c2.471,0,4.613,0.902,6.42,2.708\r\n          c1.808,1.812,2.711,3.949,2.711,6.423V447.672L511.627,447.672z\" />\r\n        <rect x=\"73.092\" y=\"310.635\" width=\"73.089\" height=\"109.632\" />\r\n        <rect x=\"182.728\" y=\"164.452\" width=\"73.085\" height=\"255.814\" />\r\n        <rect x=\"292.362\" y=\"237.541\" width=\"73.083\" height=\"182.726\" />\r\n        <rect x=\"401.994\" y=\"127.907\" width=\"73.091\" height=\"292.36\" />\r\n      </svg>\r\n      <span>Summary</span>\r\n    </button>\r\n    <button\r\n      class=\"button {$showSettings ? 'selected' : ''}\"\r\n      on:click={() => handleClick('settings')}>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 268.765 268.765\"\r\n        class=\"icon\">\r\n        <path\r\n          style=\"fill-rule:evenodd;clip-rule:evenodd;\"\r\n          d=\"M267.92,119.461c-0.425-3.778-4.83-6.617-8.639-6.617\r\n          c-12.315,0-23.243-7.231-27.826-18.414c-4.682-11.454-1.663-24.812,7.515-33.231c2.889-2.641,3.24-7.062,0.817-10.133\r\n          c-6.303-8.004-13.467-15.234-21.289-21.5c-3.063-2.458-7.557-2.116-10.213,0.825c-8.01,8.871-22.398,12.168-33.516,7.529\r\n          c-11.57-4.867-18.866-16.591-18.152-29.176c0.235-3.953-2.654-7.39-6.595-7.849c-10.038-1.161-20.164-1.197-30.232-0.08\r\n          c-3.896,0.43-6.785,3.786-6.654,7.689c0.438,12.461-6.946,23.98-18.401,28.672c-10.985,4.487-25.272,1.218-33.266-7.574\r\n          c-2.642-2.896-7.063-3.252-10.141-0.853c-8.054,6.319-15.379,13.555-21.74,21.493c-2.481,3.086-2.116,7.559,0.802,10.214\r\n          c9.353,8.47,12.373,21.944,7.514,33.53c-4.639,11.046-16.109,18.165-29.24,18.165c-4.261-0.137-7.296,2.723-7.762,6.597\r\n          c-1.182,10.096-1.196,20.383-0.058,30.561c0.422,3.794,4.961,6.608,8.812,6.608c11.702-0.299,22.937,6.946,27.65,18.415\r\n          c4.698,11.454,1.678,24.804-7.514,33.23c-2.875,2.641-3.24,7.055-0.817,10.126c6.244,7.953,13.409,15.19,21.259,21.508\r\n          c3.079,2.481,7.559,2.131,10.228-0.81c8.04-8.893,22.427-12.184,33.501-7.536c11.599,4.852,18.895,16.575,18.181,29.167\r\n          c-0.233,3.955,2.67,7.398,6.595,7.85c5.135,0.599,10.301,0.898,15.481,0.898c4.917,0,9.835-0.27,14.752-0.817\r\n          c3.897-0.43,6.784-3.786,6.653-7.696c-0.451-12.454,6.946-23.973,18.386-28.657c11.059-4.517,25.286-1.211,33.281,7.572\r\n          c2.657,2.89,7.047,3.239,10.142,0.848c8.039-6.304,15.349-13.534,21.74-21.494c2.48-3.079,2.13-7.559-0.803-10.213\r\n          c-9.353-8.47-12.388-21.946-7.529-33.524c4.568-10.899,15.612-18.217,27.491-18.217l1.662,0.043\r\n          c3.853,0.313,7.398-2.655,7.865-6.588C269.044,139.917,269.058,129.639,267.92,119.461z\r\n          M134.595,179.491\r\n          c-24.718,0-44.824-20.106-44.824-44.824c0-24.717,20.106-44.824,44.824-44.824c24.717,0,44.823,20.107,44.823,44.824\r\n          C179.418,159.385,159.312,179.491,134.595,179.491z\" />\r\n      </svg>\r\n      <span>Settings</span>\r\n    </button>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  export let text = \"\";\r\n</script>\r\n\r\n<style type=\"text/postcss\">.dot{-webkit-animation:scale 1s ease-in-out 1.4s infinite both,fade 1s ease-in-out 1.4s infinite both;animation:scale 1s ease-in-out 1.4s infinite both,fade 1s ease-in-out 1.4s infinite both;line-height:.5;color:#edf2f4;font-size:3rem;opacity:0}.dot:first-child{-webkit-animation-delay:0s;animation-delay:0s}.dot:nth-child(2){-webkit-animation-delay:-.32s;animation-delay:-.32s}.dot:nth-child(3){-webkit-animation-delay:-.16s;animation-delay:-.16s}@-webkit-keyframes scale{0%,to{-webkit-transform-origin:center;transform-origin:center;-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform-origin:center;transform-origin:center;-webkit-transform:scale(1.2);transform:scale(1.2)}}@keyframes scale{0%,to{-webkit-transform-origin:center;transform-origin:center;-webkit-transform:scale(1);transform:scale(1)}50%{-webkit-transform-origin:center;transform-origin:center;-webkit-transform:scale(1.2);transform:scale(1.2)}}@-webkit-keyframes fade{0%,to{opacity:1}50%{opacity:0}}@keyframes fade{0%,to{opacity:1}50%{opacity:0}}</style>\r\n\r\n<div class=\"w-full h-auto\">\r\n  <div class=\"flex text-center justify-center items-center\">\r\n    <div class=\"dot\">\r\n      <div>·</div>\r\n    </div>\r\n    <div class=\"dot\">\r\n      <div>·</div>\r\n    </div>\r\n    <div class=\"dot\">\r\n      <div>·</div>\r\n    </div>\r\n  </div>\r\n  {#if text !== undefined}\r\n    <body class=\"w-full text-center text-primaryColor aboslute bottom-0\">\r\n      {text}\r\n    </body>\r\n  {/if}\r\n</div>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n\r\n  export let date;\r\n  export let time;\r\n  export let title;\r\n  export let check = true;\r\n  export let minDate;\r\n\r\n  let isFocused = false;\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  function dispatchValues() {\r\n    dispatch(title.replace(/\\s+/g, \"\").toLowerCase(), {\r\n      date: date,\r\n      time: time\r\n    });\r\n  }\r\n</script>\r\n\r\n<style type=\"text/postcss\">.input{font-size:1.5rem;text-transform:lowercase;border-bottom-width:4px;color:#edf2f4;background-color:transparent;margin-bottom:1rem;min-width:35%}.input-ok{border-color:#2ec4b6}.input-error{border-color:#ef233c}.background{background-color:#2b2d42;color:#8d99ae;display:flex;flex-direction:column;align-items:center;justify-content:center}.background-selected{color:#ff9f1c}label{font-size:.875rem;font-weight:500}</style>\r\n\r\n<div class=\"background p-4 {isFocused ? 'background-selected' : ''}\">\r\n  <h1>\r\n    {title}\r\n    <body>\r\n      <div class=\"flex-wrap\">\r\n        <label for={title.replace(/\\s+/g, '').toLowerCase() + '-date'}>\r\n          DATE\r\n        </label>\r\n        <input\r\n          class=\"input {check ? 'input-ok' : 'input-error'}\"\r\n          type=\"date\"\r\n          id={title.replace(/\\s+/g, '').toLowerCase() + '-date'}\r\n          bind:value={date}\r\n          on:focus={() => (isFocused = true)}\r\n          on:blur={() => (isFocused = false)}\r\n          on:change={dispatchValues}\r\n          min={minDate} />\r\n      </div>\r\n      <div class=\"flex-wrap\">\r\n        <label for={title.replace(/\\s+/g, '').toLowerCase() + '-time'}>\r\n          TIME\r\n        </label>\r\n        <input\r\n          class=\"input {check ? 'input-ok' : 'input-error'}\"\r\n          type=\"time\"\r\n          id={title.replace(/\\s+/g, '').toLowerCase() + '-time'}\r\n          bind:value={time}\r\n          on:focus={() => (isFocused = true)}\r\n          on:blur={() => (isFocused = false)}\r\n          on:change={dispatchValues} />\r\n      </div>\r\n    </body>\r\n  </h1>\r\n  <slot />\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "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"
}